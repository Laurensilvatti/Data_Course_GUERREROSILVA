df <- add_residuals(df, mod1)
performance(mod1)
mod1 <- glm(data=penguins,
formula = body_mass_g ~ sex * species * island + bill_length_mm +
bill_depth_mm + flipper_length_mm)
mod1 <- glm(data=penguins,
formula = body_mass_g ~ sex * species * island + bill_length_mm +
bill_depth_mm + flipper_length_mm)
mod1 <- glm(data=penguins,
formula = body_mass_g ~ sex * species * island + bill_length_mm +
bill_depth_mm + flipper_length_mm)
summary(mod1)
names(penguins)
data.frame(sex = "male",
species = "Gentoo",
island = "Biscoe",
bill_length_mm = "1000",
bill_depth_mm = "1000",
flipper_length_mm = "1")
new_pen <- data.frame(sex = "male",
species = "Gentoo",
island = "Biscoe",
bill_length_mm = "1000",
bill_depth_mm = "1000",
flipper_length_mm = "1")
add_predictions(new_pen, model = mod1)
add_predictions(new_pen, model = mod1)
add_predictions(new_pen, model = mod1)
df$body_mass_g %>% max(na.rm = TRUE)
df$bill_length_mm %>% max(na.rm = TRUE)
penguins
sample(1:nrow(penguins), 69)
sample(1:nrow(penguins), round(nrow(penguins)*.2))
set.seed(69)
sample(1:nrow(penguins), round(nrow(penguins)*.2))
set.seed(69)
testing <- sample(1:nrow(penguins), round(nrow(penguins)*.2))
test <- penguins[testing,]
train <- penguins[-testing,]
mod1$formula
mod2 <- glm(data = train,
formula = mod$formula)
mod2 <- glm(data = train,
formula = mod1$formula)
add_residuals(test,mod2)
add_residuals(test,mod2) %>%
pluck("resid") %>%
.^2 %>%
mean(na.rm = TRUE) %>%
sqrt()
rmse(mod2)
performance(mod2, newdata=test)
performance(mod2, newdata=test)
performance(mod1)
rsquare(mod2,test)
rsquare(mod,penguins)
rsquare(mod,penguins)
rsquare(mod1,penguins)
for( i in 1:1000){
testing <- sample(1:nrow(penguins), size =round(nrow(penguins)*.2))
test <- penguins[testing,]    #selecting only this data
train <- penguins[-testing,]  #selecting everything but this data
mod2 <- glm(data = train,
formula = mod1$formula)
rsq_mod2[i] <- rsquare(mod2,test)
}
rsq_mod2 <- c()
for( i in 1:1000){
testing <- sample(1:nrow(penguins), size =round(nrow(penguins)*.2))
test <- penguins[testing,]    #selecting only this data
train <- penguins[-testing,]  #selecting everything but this data
mod2 <- glm(data = train,
formula = mod1$formula)
rsq_mod2[i] <- rsquare(mod2,test)
}
data.frame(value=rsq_mod2) %>%
ggplot(aes(x=value)) +
geom_density()
mean(rsq_mod2)
data.frame(value=rsq_mod2) %>%
ggplot(aes(x=value)) +
geom_density() +
geom_vline(xintercept = mean(rsq_mod2), linetype=2, color "red")
data.frame(value=rsq_mod2) %>%
ggplot(aes(x=value)) +
geom_density() +
geom_vline(xintercept = mean(rsq_mod2), linetype=2, color "red")
data.frame(value=rsq_mod2) %>%
ggplot(aes(x=value)) +
geom_density() +
geom_vline(xintercept = mean(rsq_mod2), linetype=2, color = "red")
df <- read.csv("./Data/GradSchool_Admissions.csv")
view(df)
df$admit <- as.logical(df$admit)
mod1 <- glm(data = df,
formula = admit ~ gpa * gre)
summary(mod1)
dfpreds <- df %>%
add_column(mod1 = mod1$linear.predictors)
dfpreds %>%
ggplot(aes(x = gpa, y = mod1, color = admit)) +
geom_point() +
geom_smooth() +
theme_minimal()
df$admit <- as.logical(df$admit)
df$rank <- as.factor(df$rank)
mod <- glm(data = df,
formula = admit ~ gre + gpa + rank,
family = "binomial")
summary(mod)
preds <- add_predictions(df,mod,type = "response")
preds %>% names()
gpa_plot <- preds %>%
ggplot(aes(x=gpa,y=pred,color=rank,group=rank)) +
geom_smooth() +
theme_minimal()
preds %>%
ggplot(aes(x=gpa,y=pred,color=rank,group=rank)) +
geom_smooth() +
theme_minimal()
dfpreds %>%
ggplot(aes(x = gpa, y = mod1, color = admit)) +
geom_point() +
geom_smooth() +
theme_minimal()
# Trying to do a data analysis on the fly
library(tidyverse)
library(modelr)
library(easystats)
df <- read.csv("./Data/GradSchool_Admissions.csv")
view(df)
df$admit <- as.logical(df$admit)
mod1 <- glm(data = df,
formula = admit ~ gpa * gre)
summary(mod1)
dfpreds <- df %>%
add_column(mod1 = mod1$linear.predictors)
dfpreds %>%
ggplot(aes(x = gpa, y = mod1, color = admit)) +
geom_point() +
geom_smooth() +
theme_minimal()
df$admit <- as.logical(df$admit)
df$rank <- as.factor(df$rank)
mod <- glm(data = df,
formula = admit ~ gre + gpa + rank,
family = "binomial")
summary(mod)
preds <- add_predictions(df,mod,type = "response")
preds %>% names()
gpa_plot <- preds %>%
ggplot(aes(x=gpa,y=pred,color=rank,group=rank)) +
geom_smooth() +
theme_minimal()
preds %>%
ggplot(aes(x=gpa,y=pred,color=rank,group=rank)) +
geom_smooth() +
theme_minimal()
preds %>% names()
gpa_plot <- preds %>%
ggplot(aes(x=gpa,y=pred,color=rank,group=rank)) +
geom_smooth() +
theme_minimal()
preds %>% names()
gpa_plot <- preds %>%
ggplot(aes(x=gpa,y=pred,color=rank,group=rank)) +
geom_smooth() +
theme_minimal()
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
install.packages("knitr")
library("knitr")
knitr::include_graphics("./little_thing.jpeg")
install.packages("kableExtra")
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
knitr::include_graphics("../little_thing.jpeg")
```{r,out.height=600,out.width=800}
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
library(tidyverse)
library(tidyverse)
library(easystats)
library(easystats)
library(plotly)
library(plotly)
library(kableExtra)
library(janitor)
library(janitor)
library(patchwork)
theme_set(theme_minimal())
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
library(tidyverse)
library(easystats)
library(plotly)
library(kableExtra)
library(janitor)
library(patchwork)
theme_set(theme_minimal())
###Import data
Here's a look at the whole data set. This was stored as ";" delimited and "," was used as
decimal point
``` {r}
df <- read_csv2("../Data/mee312226-sup-0003-datas1.csv") %>%
clean_names()
df %>%
kable() %>%
kable_classic(lightable_options = "hover") %>%
scroll_box(height = 4)
This data set is humerus, femur, and tibia measurement in birds. Our goal is to build a model that uses
this measures to predict body mass.
___
### Cleaning
We have to do a few data tidying tasks.
``` {r echo= TRUE}
df %>%
mutate(femoral_pneumaticity = case_when(femoral_pneumaticity == "yes" ~ TRUE,
femoral_pneumaticity == "no" ~ FALSE) %>%
as.logical(),
body_mass_log10 = log10(body_mass_g))
df %>%
filter(species %in% df[which(df$species %>% duplicated()),]$species) %>%
kable() %>%
kable_classic()
df %>%
filter(species %in% df[which(df$species %>% duplicated()),]$species) %>%
kable() %>%
kable_classic()
df %>%
filter(species %in% df[which(df$species %>% duplicated()),]$species) %>%
kable() %>%
kable_classic()
```
### Visulizing
``` {r}
femur <- df %>%
pivot_longer(starts_with("femur_"),
names_to = "measurement",
values_to = "mm",
names_prefix = "femur_") %>%
ggplot(aes(x=mm, y = body_mass_g)) +
geom_point()+
geom_smooth()+
facet_wrap(~measurement, scales = "free") +
labs(y= "Body mass (g)", x= "Length (mm)", title = "Femur messurement")
humerus <- df %>%
pivot_longer(starts_with("humerus_"),
names_to = "measurement",
values_to = "mm",
names_prefix = "humerus_") %>%
ggplot(aes(x=mm, y = body_mass_g)) +
geom_point()+
geom_smooth()+
facet_wrap(~measurement, scales = "free") +
labs(y= "Body mass (g)", x= "Length (mm)", title = "Humerus messurement")
tibia <- df %>%
pivot_longer(starts_with("tibia_"),
names_to = "measurement",
values_to = "mm",
names_prefix = "tibia_") %>%
ggplot(aes(x=mm, y = body_mass_g)) +
geom_point()+
geom_smooth()+
facet_wrap(~measurement, scales = "free") +
labs(y= "Body mass (g)", x= "Length (mm)", title = "Tibia messurement")
femur / humerus / tibia
### Modeling
``` {r}
mod1 <-  glm(data = df,
formula = body_mass_log10 ~ (humerus_length + humerus_circumference +
femur_length + femur_circumference +
tibia_length + tibia_circumference) * femoral_pneumaticity)
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
library(tidyverse)
library(easystats)
library(plotly)
library(kableExtra)
library(janitor)
library(patchwork)
theme_set(theme_minimal())
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
library(tidyverse)
library(easystats)
library(plotly)
library(kableExtra)
library(janitor)
library(patchwork)
theme_set(theme_minimal())
###Import data
Here's a look at the whole data set. This was stored as ";" delimited and "," was used as
### Import data
Here's a look at the whole data set. This was stored as ";" delimited and "," was used as
+ decimal point
``` {r}
df <- read_csv2("../Data/mee312226-sup-0003-datas1.csv") %>%
clean_names()
df %>%
kable() %>%
kable_classic(lightable_options = "hover") %>%
scroll_box(height = 4)
```
This data set is humerus, femur, and tibia measurement in birds. Our goal is to build a model that uses
this measures to predict body mass.
___
### Cleaning
We have to do a few data tidying tasks.
``` {r echo= TRUE}
df %>%
mutate(femoral_pneumaticity = case_when(femoral_pneumaticity == "yes" ~ TRUE,
femoral_pneumaticity == "no" ~ FALSE) %>%
as.logical(),
body_mass_log10 = log10(body_mass_g))
df %>%
filter(species %in% df[which(df$species %>% duplicated()),]$species) %>%
kable() %>%
kable_classic()
df %>%
filter(species %in% df[which(df$species %>% duplicated()),]$species) %>%
kable() %>%
kable_classic()
``` {r}
df <- read_csv2("../Data/mee312226-sup-0003-datas1.csv") %>%
clean_names()
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
library(tidyverse)
library(easystats)
library(plotly)
library(kableExtra)
library(janitor)
library(patchwork)
theme_set(theme_minimal())
df <- read_csv2("../Data/mee312226-sup-0003-datas1.csv") %>%
clean_names()
df %>%
kable() %>%
kable_classic(lightable_options = "hover") %>%
scroll_box(height = 4)
df %>%
mutate(femoral_pneumaticity = case_when(femoral_pneumaticity == "yes" ~ TRUE,
femoral_pneumaticity == "no" ~ FALSE) %>%
as.logical(),
body_mass_log10 = log10(body_mass_g))
df %>%
filter(species %in% df[which(df$species %>% duplicated()),]$species) %>%
kable() %>%
kable_classic()
df %>%
filter(species %in% df[which(df$species %>% duplicated()),]$species) %>%
kable() %>%
kable_classic()
df %>%
filter(species %in% df[which(df$species %>% duplicated()),]$species) %>%
kable() %>%
kable_classic()
femur <- df %>%
pivot_longer(starts_with("femur_"),
names_to = "measurement",
values_to = "mm",
names_prefix = "femur_") %>%
ggplot(aes(x=mm, y = body_mass_g))
geom_point()
femur <- df %>%
pivot_longer(starts_with("femur_"),
names_to = "measurement",
values_to = "mm",
names_prefix = "femur_") %>%
ggplot(aes(x=mm, y = body_mass_g))
femur <- df %>%
pivot_longer(starts_with("femur_"),
names_to = "measurement",
values_to = "mm",
names_prefix = "femur_") %>%
ggplot(aes(x=mm, y = body_mass_g)) +
geom_point() +
geom_smooth() +
facet_wrap(~measurement, scales = "free")  +
labs(y= "Body mass (g)", x= "Length (mm)", title = "Femur messurement")
humerus <- df %>%
pivot_longer(starts_with("humerus_"),
names_to = "measurement",
values_to = "mm",
names_prefix = "humerus_") %>%
ggplot(aes(x=mm, y = body_mass_g))  +
geom_point() +
geom_smooth() +
facet_wrap(~measurement, scales = "free") +
labs(y= "Body mass (g)", x= "Length (mm)", title = "Humerus messurement")
tibia <- df %>%
pivot_longer(starts_with("tibia_"),
names_to = "measurement",
values_to = "mm",
names_prefix = "tibia_") %>%
ggplot(aes(x=mm, y = body_mass_g)) +
geom_point() +
geom_smooth() +
facet_wrap(~measurement, scales = "free")+
labs(y= "Body mass (g)", x= "Length (mm)", title = "Tibia messurement")
femur / humerus / tibia
mod1 <-  glm(data = df,
formula = body_mass_log10 ~ (humerus_length   humerus_circumference
mod1 <- glm(data = df,
formula = body_mass_log10 ~ (humerus_length + humerus_circumference
femur_length + femur_circumference
mod1 <- glm(data = df,
formula = body_mass_log10 ~ (humerus_length + humerus_circumference +
femur_length + femur_circumference +
tibia_length + tibia_circumference) * femoral_pneumaticity)
mod1 <- glm(data = df,
formula = body_mass_log10 ~ (humerus_length + humerus_circumference +
femur_length + femur_circumference +
tibia_length + tibia_circumference) * femoral_pneumaticity)
View(df)
df %>%
mutate(femoral_pneumaticity = case_when(femoral_pneumaticity == "yes" ~ TRUE,
femoral_pneumaticity == "no" ~ FALSE) %>%
as.logical(),
body_mass_log10 = log10(body_mass_g))
df %>%
mutate(femoral_pneumaticity = case_when(femoral_pneumaticity == "yes" ~ TRUE,
femoral_pneumaticity == "no" ~ FALSE) %>%
as.logical(),
body_mass_log10 = log10(body_mass_g))
df %>%
mutate(femoral_pneumaticity = case_when(femoral_pneumaticity == "yes" ~ TRUE,
femoral_pneumaticity == "no" ~ FALSE) %>%
as.logical(),
body_mass_log10 = log10(body_mass_g))
df %>%
filter(species %in% df[which(df$species %>% duplicated()),]$species) %>%
kable() %>%
kable_classic()
```
humerus <- df %>%
pivot_longer(starts_with("humerus_"),
names_to = "measurement",
values_to = "mm",
names_prefix = "humerus_") %>%
ggplot(aes(x=mm, y = body_mass_g))  +
geom_point() +
geom_smooth() +
facet_wrap(~measurement, scales = "free") +
labs(y= "Body mass (g)", x= "Length (mm)", title = "Humerus messurement")
tibia <- df %>%
pivot_longer(starts_with("tibia_"),
names_to = "measurement",
values_to = "mm",
names_prefix = "tibia_") %>%
ggplot(aes(x=mm, y = body_mass_g)) +
geom_point() +
geom_smooth() +
facet_wrap(~measurement, scales = "free")+
labs(y= "Body mass (g)", x= "Length (mm)", title = "Tibia messurement")
femur / humerus / tibia
mod1 <- glm(data = df,
formula = body_mass_log10 ~ (humerus_length + humerus_circumference +
femur_length + femur_circumference +
tibia_length + tibia_circumference) * femoral_pneumaticity)
df <-
df %>%
mutate(femoral_pneumaticity = case_when(femoral_pneumaticity == "yes" ~ TRUE,
femoral_pneumaticity == "no" ~ FALSE) %>%
as.logical(),
body_mass_log10 = log10(body_mass_g))
df %>%
filter(species %in% df[which(df$species %>% duplicated()),]$species) %>%
kable() %>%
kable_classic()
mod1 <- glm(data = df,
formula = body_mass_log10 ~ (humerus_length + humerus_circumference +
femur_length + femur_circumference +
tibia_length + tibia_circumference) * femoral_pneumaticity)
mod1 %>%
broom::tidy() %>%
dplyr::filter(p_value <= 0.05) %>%
kable() %>%
kable_classic(lightable_options = "hover")
mod1 %>%
broom::tidy() %>%
dplyr::filter(.,p_value <= 0.05) %>%
kable() %>%
kable_classic(lightable_options = "hover")
mod1 %>%
broom::tidy() %>%
dplyr::filter(p_value <= 0.05) %>%
kable() %>%
kable_classic(lightable_options = "hover")
mod1 %>%
broom::tidy() %>%
dplyer::filter(p_value <= 0.05) %>%
kable() %>%
kable_classic(lightable_options = "hover")
mod1 %>%
broom::tidy() %>%
dplyr::filter(p_value <= 0.05) %>%
kable() %>%
kable_classic(lightable_options = "hover")
mod1 %>%
broom::tidy() %>%
dplyr::filter(p_value <= 0.05) %>%
kable() %>%
kable_classic(lightable_options = "hover")
mod1 %>%
broom::tidy() %>%
dplyr::filter(p.value <= 0.05) %>%
kable() %>%
kable_classic(lightable_options = "hover")
step <- MASS::stepAIC(mod1, direction = "backward")
modelr::add_predictions(df,mod1) %>%
mutate(pred_g = pred^10,
residuals = abs(body_mass_g - pred_g)) %>%
ggplot(aes(x= pred_g,y=body_mass_g)) +
geom_point() +
geom_smooth()
