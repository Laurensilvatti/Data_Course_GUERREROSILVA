df <- read_csv2("../Data/mee312226-sup-0003-datas1.csv") %>%
clean_names()
df %>%
kable() %>%
kable_classic(lightable_options = "hover") %>%
scroll_box(height = 4)
```
This data set is humerus, femur, and tibia measurement in birds. Our goal is to build a model that uses
this measures to predict body mass.
___
### Cleaning
We have to do a few data tidying tasks.
``` {r echo= TRUE}
df %>%
mutate(femoral_pneumaticity = case_when(femoral_pneumaticity == "yes" ~ TRUE,
femoral_pneumaticity == "no" ~ FALSE) %>%
as.logical(),
body_mass_log10 = log10(body_mass_g))
df %>%
filter(species %in% df[which(df$species %>% duplicated()),]$species) %>%
kable() %>%
kable_classic()
df %>%
filter(species %in% df[which(df$species %>% duplicated()),]$species) %>%
kable() %>%
kable_classic()
``` {r}
df <- read_csv2("../Data/mee312226-sup-0003-datas1.csv") %>%
clean_names()
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
library(tidyverse)
library(easystats)
library(plotly)
library(kableExtra)
library(janitor)
library(patchwork)
theme_set(theme_minimal())
df <- read_csv2("../Data/mee312226-sup-0003-datas1.csv") %>%
clean_names()
df %>%
kable() %>%
kable_classic(lightable_options = "hover") %>%
scroll_box(height = 4)
df %>%
mutate(femoral_pneumaticity = case_when(femoral_pneumaticity == "yes" ~ TRUE,
femoral_pneumaticity == "no" ~ FALSE) %>%
as.logical(),
body_mass_log10 = log10(body_mass_g))
df %>%
filter(species %in% df[which(df$species %>% duplicated()),]$species) %>%
kable() %>%
kable_classic()
df %>%
filter(species %in% df[which(df$species %>% duplicated()),]$species) %>%
kable() %>%
kable_classic()
df %>%
filter(species %in% df[which(df$species %>% duplicated()),]$species) %>%
kable() %>%
kable_classic()
femur <- df %>%
pivot_longer(starts_with("femur_"),
names_to = "measurement",
values_to = "mm",
names_prefix = "femur_") %>%
ggplot(aes(x=mm, y = body_mass_g))
geom_point()
femur <- df %>%
pivot_longer(starts_with("femur_"),
names_to = "measurement",
values_to = "mm",
names_prefix = "femur_") %>%
ggplot(aes(x=mm, y = body_mass_g))
femur <- df %>%
pivot_longer(starts_with("femur_"),
names_to = "measurement",
values_to = "mm",
names_prefix = "femur_") %>%
ggplot(aes(x=mm, y = body_mass_g)) +
geom_point() +
geom_smooth() +
facet_wrap(~measurement, scales = "free")  +
labs(y= "Body mass (g)", x= "Length (mm)", title = "Femur messurement")
humerus <- df %>%
pivot_longer(starts_with("humerus_"),
names_to = "measurement",
values_to = "mm",
names_prefix = "humerus_") %>%
ggplot(aes(x=mm, y = body_mass_g))  +
geom_point() +
geom_smooth() +
facet_wrap(~measurement, scales = "free") +
labs(y= "Body mass (g)", x= "Length (mm)", title = "Humerus messurement")
tibia <- df %>%
pivot_longer(starts_with("tibia_"),
names_to = "measurement",
values_to = "mm",
names_prefix = "tibia_") %>%
ggplot(aes(x=mm, y = body_mass_g)) +
geom_point() +
geom_smooth() +
facet_wrap(~measurement, scales = "free")+
labs(y= "Body mass (g)", x= "Length (mm)", title = "Tibia messurement")
femur / humerus / tibia
mod1 <-  glm(data = df,
formula = body_mass_log10 ~ (humerus_length   humerus_circumference
mod1 <- glm(data = df,
formula = body_mass_log10 ~ (humerus_length + humerus_circumference
femur_length + femur_circumference
mod1 <- glm(data = df,
formula = body_mass_log10 ~ (humerus_length + humerus_circumference +
femur_length + femur_circumference +
tibia_length + tibia_circumference) * femoral_pneumaticity)
mod1 <- glm(data = df,
formula = body_mass_log10 ~ (humerus_length + humerus_circumference +
femur_length + femur_circumference +
tibia_length + tibia_circumference) * femoral_pneumaticity)
View(df)
df %>%
mutate(femoral_pneumaticity = case_when(femoral_pneumaticity == "yes" ~ TRUE,
femoral_pneumaticity == "no" ~ FALSE) %>%
as.logical(),
body_mass_log10 = log10(body_mass_g))
df %>%
mutate(femoral_pneumaticity = case_when(femoral_pneumaticity == "yes" ~ TRUE,
femoral_pneumaticity == "no" ~ FALSE) %>%
as.logical(),
body_mass_log10 = log10(body_mass_g))
df %>%
mutate(femoral_pneumaticity = case_when(femoral_pneumaticity == "yes" ~ TRUE,
femoral_pneumaticity == "no" ~ FALSE) %>%
as.logical(),
body_mass_log10 = log10(body_mass_g))
df %>%
filter(species %in% df[which(df$species %>% duplicated()),]$species) %>%
kable() %>%
kable_classic()
```
humerus <- df %>%
pivot_longer(starts_with("humerus_"),
names_to = "measurement",
values_to = "mm",
names_prefix = "humerus_") %>%
ggplot(aes(x=mm, y = body_mass_g))  +
geom_point() +
geom_smooth() +
facet_wrap(~measurement, scales = "free") +
labs(y= "Body mass (g)", x= "Length (mm)", title = "Humerus messurement")
tibia <- df %>%
pivot_longer(starts_with("tibia_"),
names_to = "measurement",
values_to = "mm",
names_prefix = "tibia_") %>%
ggplot(aes(x=mm, y = body_mass_g)) +
geom_point() +
geom_smooth() +
facet_wrap(~measurement, scales = "free")+
labs(y= "Body mass (g)", x= "Length (mm)", title = "Tibia messurement")
femur / humerus / tibia
mod1 <- glm(data = df,
formula = body_mass_log10 ~ (humerus_length + humerus_circumference +
femur_length + femur_circumference +
tibia_length + tibia_circumference) * femoral_pneumaticity)
df <-
df %>%
mutate(femoral_pneumaticity = case_when(femoral_pneumaticity == "yes" ~ TRUE,
femoral_pneumaticity == "no" ~ FALSE) %>%
as.logical(),
body_mass_log10 = log10(body_mass_g))
df %>%
filter(species %in% df[which(df$species %>% duplicated()),]$species) %>%
kable() %>%
kable_classic()
mod1 <- glm(data = df,
formula = body_mass_log10 ~ (humerus_length + humerus_circumference +
femur_length + femur_circumference +
tibia_length + tibia_circumference) * femoral_pneumaticity)
mod1 %>%
broom::tidy() %>%
dplyr::filter(p_value <= 0.05) %>%
kable() %>%
kable_classic(lightable_options = "hover")
mod1 %>%
broom::tidy() %>%
dplyr::filter(.,p_value <= 0.05) %>%
kable() %>%
kable_classic(lightable_options = "hover")
mod1 %>%
broom::tidy() %>%
dplyr::filter(p_value <= 0.05) %>%
kable() %>%
kable_classic(lightable_options = "hover")
mod1 %>%
broom::tidy() %>%
dplyer::filter(p_value <= 0.05) %>%
kable() %>%
kable_classic(lightable_options = "hover")
mod1 %>%
broom::tidy() %>%
dplyr::filter(p_value <= 0.05) %>%
kable() %>%
kable_classic(lightable_options = "hover")
mod1 %>%
broom::tidy() %>%
dplyr::filter(p_value <= 0.05) %>%
kable() %>%
kable_classic(lightable_options = "hover")
mod1 %>%
broom::tidy() %>%
dplyr::filter(p.value <= 0.05) %>%
kable() %>%
kable_classic(lightable_options = "hover")
step <- MASS::stepAIC(mod1, direction = "backward")
modelr::add_predictions(df,mod1) %>%
mutate(pred_g = pred^10,
residuals = abs(body_mass_g - pred_g)) %>%
ggplot(aes(x= pred_g,y=body_mass_g)) +
geom_point() +
geom_smooth()
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
library(tidyverse)
library(tidyverse)
library(easystats)
library(plotly)
library(kableExtra)
library(janitor)
library(patchwork)
# custom function to read in data
read_vernier <- function(path){
txt <- readLines(path)
starts <- grep("Vernier",txt)
# seems like "Vernier" is followed by 6 useless lines, then the data, then an empty line
# the word "Vernier" should mark the end of each run output by the computer ...
# well, the beginning of a run actually
# build vector of skip values:
skips <- starts+6
# remove last one because it *seems* to always be empty
skips <- skips[1:length(skips)-1]
# define empty list
df_list <- list()
# i <- 1
# define function to read in each as a new item in the empty list
for(i in seq_along(skips)){
run <- read_delim(file=path,
col_names = FALSE,
delim = "\t",
skip = skips[i],
)
run$X4 <- NULL # remove empty column
names(run) <- c("volume","pH","temp_c")# rename columns
run$run <- paste0("run_",i) # add run name column
max_n <- min(grep("Vernier",run$volume)) - 1 # find last line before first instance of "Vernier"
# run[1:(max_n),] %>% View
run <- run[1:(max_n),]# subset to remove everything after that
run <- run %>%
mutate(volume = as.numeric(volume),
pH = as.numeric(pH),
temp_c = as.numeric(temp_c))# convert to numeric
df_list[[i]] <- run # add to list of data frames
}
# df_list
# combine all items from list into new data frame
df_all <- reduce(df_list,full_join)
return(df_all)
}
View(read_vernier)
# custom function to read in data
function(path){
txt <- readLines(path)
starts <- grep("Vernier",txt)
# seems like "Vernier" is followed by 6 useless lines, then the data, then an empty line
# the word "Vernier" should mark the end of each run output by the computer ...
# well, the beginning of a run actually
# build vector of skip values:
skips <- starts+6
# remove last one because it *seems* to always be empty
skips <- skips[1:length(skips)-1]
# define empty list
df_list <- list()
# i <- 1
# define function to read in each as a new item in the empty list
for(i in seq_along(skips)){
run <- read_delim(file=path,
col_names = FALSE,
delim = "\t",
skip = skips[i],
)
run$X4 <- NULL # remove empty column
names(run) <- c("volume","pH","temp_c")# rename columns
run$run <- paste0("run_",i) # add run name column
max_n <- min(grep("Vernier",run$volume)) - 1 # find last line before first instance of "Vernier"
# run[1:(max_n),] %>% View
run <- run[1:(max_n),]# subset to remove everything after that
run <- run %>%
mutate(volume = as.numeric(volume),
pH = as.numeric(pH),
temp_c = as.numeric(temp_c))# convert to numeric
df_list[[i]] <- run # add to list of data frames
}
# df_list
# combine all items from list into new data frame
df_all <- reduce(df_list,full_join)
return(df_all)
}
# custom function to read in data
function(path){
txt <- readLines(path)
starts <- grep("Vernier",txt)
# seems like "Vernier" is followed by 6 useless lines, then the data, then an empty line
# the word "Vernier" should mark the end of each run output by the computer ...
# well, the beginning of a run actually
# build vector of skip values:
skips <- starts+6
# remove last one because it *seems* to always be empty
skips <- skips[1:length(skips)-1]
# define empty list
df_list <- list()
# i <- 1
# define function to read in each as a new item in the empty list
for(i in seq_along(skips)){
run <- read_delim(file=path,
col_names = FALSE,
delim = "\t",
skip = skips[i],
)
run$X4 <- NULL # remove empty column
names(run) <- c("volume","pH","temp_c")# rename columns
run$run <- paste0("run_",i) # add run name column
max_n <- min(grep("Vernier",run$volume)) - 1 # find last line before first instance of "Vernier"
# run[1:(max_n),] %>% View
run <- run[1:(max_n),]# subset to remove everything after that
run <- run %>%
mutate(volume = as.numeric(volume),
pH = as.numeric(pH),
temp_c = as.numeric(temp_c))# convert to numeric
df_list[[i]] <- run # add to list of data frames
}
# df_list
# combine all items from list into new data frame
df_all <- reduce(df_list,full_join)
return(df_all)
}
# custom function to read in data
read_vernier <- function(path){
txt <- readLines(path)
starts <- grep("Vernier",txt)
# seems like "Vernier" is followed by 6 useless lines, then the data, then an empty line
# the word "Vernier" should mark the end of each run output by the computer ...
# well, the beginning of a run actually
# build vector of skip values:
skips <- starts+6
# remove last one because it *seems* to always be empty
skips <- skips[1:length(skips)-1]
# define empty list
df_list <- list()
# i <- 1
# define function to read in each as a new item in the empty list
for(i in seq_along(skips)){
run <- read_delim(file=path,
col_names = FALSE,
delim = "\t",
skip = skips[i],
)
run$X4 <- NULL # remove empty column
names(run) <- c("volume","pH","temp_c")# rename columns
run$run <- paste0("run_",i) # add run name column
max_n <- min(grep("Vernier",run$volume)) - 1 # find last line before first instance of "Vernier"
# run[1:(max_n),] %>% View
run <- run[1:(max_n),]# subset to remove everything after that
run <- run %>%
mutate(volume = as.numeric(volume),
pH = as.numeric(pH),
temp_c = as.numeric(temp_c))# convert to numeric
df_list[[i]] <- run # add to list of data frames
}
# df_list
# combine all items from list into new data frame
df_all <- reduce(df_list,full_join)
return(df_all)
}
library(readxl)
file <- "~/OneDrive/Documentos/Chem 1225/lab8.xlsx"
run1 <- readxl::read_xlsx(file, range = "A8:C45", col_names = FALSE)
run2 <- readxl::read_xlsx(file, range = "D9:F47", col_names = FALSE)
run3 <- readxl::read_xlsx(file, range = "G9:I20", col_names = FALSE)
run4 <- readxl::read_xlsx(file, range = "J9:L22", col_names = FALSE)
View(run1)
myfunction <-  function(x){
y <-x*2
return(y)
}
myfunction(5)
library(tidyverse)
library(easystats)
library(plotly)
library(kableExtra)
library(janitor)
library(patchwork)
library(readxl)
theme_set(theme_minimal())
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
library(tidyverse)
library(easystats)
library(plotly)
library(kableExtra)
library(janitor)
library(patchwork)
library(readxl)
theme_set(theme_minimal())
``` {r}
# custom function to read in data
read_vernier <- function(path){
txt <- readLines(path)
starts <- grep("Vernier",txt)
# seems like "Vernier" is followed by 6 useless lines, then the data, then an empty line
# the word "Vernier" should mark the end of each run output by the computer ...
# well, the beginning of a run actually
# build vector of skip values:
skips <- starts+6
# remove last one because it *seems* to always be empty
skips <- skips[1:length(skips)-1]
# define empty list
df_list <- list()
# i <- 1
# define function to read in each as a new item in the empty list
for(i in seq_along(skips)){
run <- read_delim(file=path,
col_names = FALSE,
delim = "\t",
skip = skips[i],
)
run$X4 <- NULL # remove empty column
names(run) <- c("volume","pH","temp_c")# rename columns
run$run <- paste0("run_",i) # add run name column
max_n <- min(grep("Vernier",run$volume)) - 1 # find last line before first instance of "Vernier"
# run[1:(max_n),] %>% View
run <- run[1:(max_n),]# subset to remove everything after that
run <- run %>%
mutate(volume = as.numeric(volume),
pH = as.numeric(pH),
temp_c = as.numeric(temp_c))# convert to numeric
df_list[[i]] <- run # add to list of data frames
}
# df_list
# combine all items from list into new data frame
df_all <- reduce(df_list,full_join)
return(df_all)
}
lab <- read_vernier("~/OneDrive/Documentos/Chem 1225/lab8.txt")
lab <- read_vernier("~/OneDrive/Documentos/Chem 1225/lab8.txt")
names(lab) <-  c("volume", "Ph", "fisrt_deriv", "run")
names(lab) <-  c("volume", "Ph", "fisrt_deriv", "run")
lab %>%
mutate(buffered = case_when(run == "run_1" ~ FALSE,
run == "run_3" ~ FALSE,
TRUE ~ TRUE),
acid_base = case_when(run == "run_1" ~ "base",
run == "run_2" ~ "base",
TRUE ~ "acid"))
lab[lab$run %in% c("run_3","run_4"), "first_deriv"] <-  NA
View(lab)
View(lab)
lab <- read_vernier("~/OneDrive/Documentos/Chem 1225/lab8.txt")
names(lab) <-  c("volume", "Ph", "first_deriv", "run")
lab %>%
mutate(buffered = case_when(run == "run_1" ~ FALSE,
run == "run_3" ~ FALSE,
TRUE ~ TRUE),
acid_base = case_when(run == "run_1" ~ "base",
run == "run_2" ~ "base",
TRUE ~ "acid"))
lab <-  lab[lab$run %in% c("run_3","run_4"), "first_deriv"] <-  NA
lab <- read_vernier("~/OneDrive/Documentos/Chem 1225/lab8.txt")
names(lab) <-  c("volume", "Ph", "first_deriv", "run")
lab %>%
mutate(buffered = case_when(run == "run_1" ~ FALSE,
run == "run_3" ~ FALSE,
TRUE ~ TRUE),
acid_base = case_when(run == "run_1" ~ "base",
run == "run_2" ~ "base",
TRUE ~ "acid"))
lab <- lab[lab$run %in% c("run_3","run_4"), "first_deriv"] <- NA
lab <- read_vernier("~/OneDrive/Documentos/Chem 1225/lab8.txt")
lab <- read_vernier("~/OneDrive/Documentos/Chem 1225/lab8.txt")
names(lab) <-  c("volume", "Ph", "first_deriv", "run")
lab %>%
mutate(buffered = case_when(run == "run_1" ~ FALSE,
run == "run_3" ~ FALSE,
TRUE ~ TRUE),
acid_base = case_when(run == "run_1" ~ "base",
run == "run_2" ~ "base",
TRUE ~ "acid"))
lab <- read_vernier("~/OneDrive/Documentos/Chem 1225/lab8.txt")
lab <- read_vernier("~/OneDrive/Documentos/Chem 1225/lab8.txt")
names(lab) <-  c("volume", "Ph", "first_deriv", "run")
lab %>%
mutate(buffered = case_when(run == "run_1" ~ FALSE,
run == "run_3" ~ FALSE,
TRUE ~ TRUE),
acid_base = case_when(run == "run_1" ~ "base",
run == "run_2" ~ "base",
TRUE ~ "acid"))
lab %>%
mutate(buffered = case_when(run == "run_1" ~ FALSE,
run == "run_3" ~ FALSE,
TRUE ~ TRUE),
acid_base = case_when(run == "run_1" ~ "base",
run == "run_2" ~ "base",
TRUE ~ "acid"))
lab[lab$run %in% c("run_3","run_4"), "first_deriv"] <- NA
